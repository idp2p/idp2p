syntax = "proto3";
package idp2p.pb;

message VerifiableCredentialEventKind {
    oneof event_kind {
        bytes inception = 1;
        bytes mutation = 2;
        bytes seal = 3;
    }
}

/* Assertion inception model*/
message VerifiableCredentialInception {
    bytes root_next_pk_hash = 1; // MultiKeyHash of next public key(Winternitz)
    bytes owner_next_pk_hash = 2; // MultiKeyHash of next public key(ed25519)
    bytes cred_proof_tree_root = 3; // MultiHash of credentials
}

message VerifiableProofMutation {
    bytes payload = 1;  // Encoded bytes of event payload(It is encoded because of deterministic event_id and signature)
    bytes signature = 2;  // Signature of payload bytes 
}

message VerifiableProofMutationPayload {
    oneof assertion_kind {
        RootAssertion root_assertion = 1;
        OwnerAssertion owner_assertion = 2;
    }
}

message RootAssertion {
    bytes root_pk = 1; // Raw signer public key 
    bytes root_next_pk_hash = 2; // MultiHash digest of next public key
    bytes owner_next_pk_hash = 3;
}

message OwnerAssertion {
    bytes owner_pk = 1; // Raw signer public key 
    bytes owner_next_pk_hash = 2; // MultiHash digest of next public key
    oneof owner_assertion_kind {
        bytes cred_proof_tree_root = 3; // MultiHash of credentials
        bool revocation = 4;
    }
}

/* Assertion inception model*/
message VerifiableProofSeal {
    bytes revocation_secret_hash = 1;
    bytes proof_hash = 2; 
}

