syntax = "proto3";
import "common.proto";
package idp2p.pb;

message EventLogPayload{
    bytes previous = 1; // Multihash of previous event payload
    bytes signer_key = 2; // Raw signer public key(recover or next key) 
    Idp2pKeyDigest next_key_digest = 3; 
    int64 timestamp = 4;
    oneof change {
        Idp2pKeyDigest recover = 5;
        IdentityEvents events = 6; 
    }
    message IdentityEvents {
        repeated IdentityEvent events = 1;
    }
}

message IdentityEvent {
    oneof event_type { 
        Idp2pKey create_assertion_key = 1; 
        Idp2pKey create_authentication_key = 2; 
        Idp2pAgreementKey create_agreement_key = 3;
        bytes revoke_assertion_key = 4;
        bytes revoke_authentication_key = 5;
        bytes revoke_agreement_key = 6;
        Idp2pProof set_proof = 7;
    }
}

message IdentityInception {
    int64 timestamp = 4;
    Idp2pKeyDigest next_key_digest = 1; 
    Idp2pKeyDigest recovery_key_digest= 2; 
    repeated IdentityEvent events = 3; 
}

message EventLog {
    bytes event_id = 1; // multihash of payload
    bytes payload = 2;  // For deterministic proof
    bytes proof = 3;
}

message Microledger {
    bytes inception = 1; // For deterministic id
    repeated EventLog event_logs = 2;
}

message Identity {
    bytes id = 1;
    Microledger microledger = 2;
}


