syntax = "proto3";
package idp2p.pb;

/* Identity model */
message Identity {
    bytes id = 1; // Content identifier of microledger inception(See https://github.com/multiformats/cid)
    Microledger microledger = 2; // All information about identity
}

/* Identity microledger model */
message Microledger {
    bytes inception = 1; // Encoded bytes of inception(It is encoded because of deterministic cid)
    repeated EventLog event_logs = 2; // List of event logs
}

/* Identity inception model*/
message IdentityInception {
    int64 timestamp = 1; // UTC time 
    bytes next_key_digest = 2; // MultiKeyDigest of next public key
    bytes recovery_key_digest= 3; // MultiKeyDigest of next recovery public key
    repeated IdentityEvent events = 4; // Initial events
}

message EventLog {
    bytes id = 1; // Multi id
    bytes payload = 2;  // Encoded bytes of event payload(It is encoded because of deterministic event_id and signature)
    bytes proof = 3;  // Signature of payload bytes 
}

message EventLogPayload{
    bytes previous = 1; // MultiDigest of previous event payload bytes
    bytes signer_key = 2; // Raw signer public key 
    bytes next_key_digest = 3; // MultiKeyDigest digest of next public key
    int64 timestamp = 4;
    oneof change {
        bytes recover = 5; // MultiKeyDigest of recovery public key
        IdentityEvents events = 6; // Event list
    }
    message IdentityEvents {
        repeated IdentityEvent events = 1;
    }
}

message IdentityEvent {
    oneof event_type { 
        Idp2pMultiKey create_assertion_key = 1; // Assertion MultiKey
        Idp2pMultiKey create_authentication_key = 2; // Authentication MultiKey
        Idp2pMultiKey create_agreement_key = 3; // Agreement MultiKey
        Idp2pProof set_proof = 4; // Any proof about identity, it is the way to extend identity
        bytes revoke_assertion_key = 5; // Multi assertion key
        bytes revoke_authentication_key = 6; // Multi authentication key
        bytes revoke_agreement_key = 7; // Multi agreement key
    }
}

message Idp2pProof {
    bytes key = 1; // Proof key
    bytes value = 2; // Proof value
}

message Idp2pMultiKey {
    bytes id = 1; // Id of the key
    bytes bytes = 2; // Value of the key
}
