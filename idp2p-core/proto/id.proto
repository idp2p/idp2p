syntax = "proto3";
package idp2p.pb;

message Microledger {
    bytes inception = 1;
    repeated Mutation mutations = 2;
}

/* Identity inception model*/
message Inception {
    bytes root_next_pk_hash = 1; // MultiKeyHash of next public key(Winternitz)
    bytes owner_next_pk_hash = 2; // MultiKeyHash of next public key(ed25519)
    bytes sdt_proof = 3; // MultiHash of trie root
    Idp2pClaims claims = 4; 
}

message Mutation {
    bytes payload = 1;  // Encoded bytes of mutation payload(It is encoded because of deterministic event_id and signature)
    bytes signature = 2;  // Signature of payload bytes(signed with owner or root pk )
}

message MutationPayload {
    oneof mutation_kind {
        SetProof set_proof = 1;
        Recover recover = 2;
    }
}

message SetProof {
    bytes owner_pk = 1; // Raw signer public key 
    bytes owner_next_pk_hash = 2; // MultiHash digest of next public key
    bytes sdt_proof = 3; // MultiHash of credentials
    Idp2pClaims claims = 4;
}

message Recover {
    bytes root_pk = 1; // Raw signer public key 
    bytes root_next_pk_hash = 2; // MultiHash digest of next public key
    bytes owner_next_pk_hash = 3; // MultiHash of trie root
}

message Idp2pClaim {
    string key = 1; // Key of the claim e.g /assertion_keys/1 
    bytes value = 2; // Value of the claim
}

message Idp2pClaims {
    repeated Idp2pClaim claims = 1;
}
