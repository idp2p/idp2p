syntax = "proto3";
package idp2p.pb;

message VerifiableCred {
   bytes merkle_root = 1;
   repeated string keys = 2;
   repeated bytes seals = 3;
}

message VerifiableCreds {
    repeated VerifiableCred creds = 1;
}

/* Assertion inception model*/
message AssertionInception {
    bytes ctrl_next_pk_hash = 1; // MultiKeyHash of next public key(ed25519)
    bytes owner_next_pk_hash = 2; // MultiKeyHash of next public key(Winternitz)
    bytes creds_hash = 3; // MultiHash of credentials
    repeated bytes seals = 4; // MultiHash of issuer secret
}

message AssertionMutation {
    bytes payload = 1;  // Encoded bytes of event payload(It is encoded because of deterministic event_id and signature)
    bytes signature = 2;  // Signature of payload bytes 
}

message AssertionMutationPayload {
    oneof assertion_kind {
        ControllerAssertion ctrl_assertion = 1;
        OwnerAssertion owner_assertion = 2;
        bytes revoke_seal = 3; // 
    }
}

message ControllerAssertion {
    bytes ctrl_pk = 1; // Raw signer public key 
    bytes ctrl_next_pk_hash = 2; // MultiHash digest of next public key
    oneof ctrl_assertion_kind {
       bool revoke = 3;
       bytes change_owner = 4;
    }
}

message OwnerAssertion {
    bytes owner_pk = 1; // Raw signer public key 
    bytes owner_next_pk_hash = 2; // MultiHash digest of next public key
    bytes creds_hash = 3; // MultiHash of credentials
    repeated bytes seals = 4; // MultiHash of issuer key
}

