syntax = "proto3";
package idp2p.pb;

/* Identity model */
message Identity {
    bytes id = 1; // Content identifier of microledger inception(See https://github.com/multiformats/cid)
    Microledger microledger = 2; // All information about identity
}

/* Identity microledger model */
message Microledger {
    bytes inception = 1; // Encoded bytes of inception(It is encoded because of deterministic cid)
    repeated EventLog event_logs = 2; // List of event logs
}

/* Identity inception model*/
message IdentityInception {
    int32 version = 1; // Version of inception
    int64 timestamp = 2; // UTC time 
    bytes next_key_digest = 3; // MultiKeyDigest of next public key
    bytes recovery_key_digest= 4; // MultiKeyDigest of next recovery public key
    repeated IdentityEvent events = 5; // Initial events
}

message EventLog {
    bytes event_id = 1; // MultiDigest of encoded payload bytes
    bytes payload = 2;  // Encoded bytes of event payload(It is encoded because of deterministic event_id and signature)
    bytes proof = 3;  // Signature of payload bytes 
}

message EventLogPayload{
    int32 version = 1; // Version of event
    bytes previous = 2; // MultiDigest of previous event payload bytes
    bytes signer_key = 3; // Raw signer public key 
    bytes next_key_digest = 4; // MultiKeyDigest digest of next public key
    int64 timestamp = 5;
    oneof change {
        bytes recover = 6; // MultiKeyDigest of recovery public key
        IdentityEvents events = 7; // Event list
    }
    message IdentityEvents {
        repeated IdentityEvent events = 1;
    }
}

message IdentityEvent {
    oneof event_type { 
        Idp2pVerificationKey create_assertion_key = 1; // Assertion MultiKey
        Idp2pVerificationKey create_authentication_key = 2; // Authentication MultiKey
        Idp2pVerificationKey create_agreement_key = 3; // Agreement MultiKey
        Idp2pProof set_proof = 4;
        bytes revoke_assertion_key = 5; // Multi assertion key
        bytes revoke_authentication_key = 6; // Multi authentication key
        bytes revoke_agreement_key = 7; // Multi agreement key

    }
}

message Idp2pProof{
    bytes key = 1; // Proof key
    bytes value = 2; // Proof value
}

message Idp2pVerificationKey{
    bytes id = 1; // Key key
    bytes value = 2; // Proof value
}
