package idp2p:p2p;

interface id-query {
    get: func(id: string) -> result<option<list<u8>>, string>;
    verify-inception: func(version: u64, inception: list<u8>) -> result<list<u8>, string>;
    verify-event: func(version: u64, view: list<u8>, event: list<u8>) -> result<list<u8>, string>;
}

interface id-handler {    

    record id-request-event {
        peer: string,
        payload: list<u8>
    }

    record id-publish-event {
        topic: string,
        payload: list<u8>
    }

    record id-put-event {
        key: string,
        value: list<u8>
    }

    variant id-handler-event {
        put(id-put-event),
        request(id-request-event),
        response(list<u8>),
        publish(id-publish-event),
    }

    variant id-message-kind {
        gossip,
        request,
        response
    }

    handle-message: func(kind: id-message-kind, msg: list<u8>) -> result<list<id-handler-event>, string>;
}

world idp2p-p2p {
    import id-query;
    export id-handler;
}