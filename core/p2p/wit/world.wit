package idp2p:p2p;

interface id-store {
    get: func(key: string) -> result<list<u8>, string>;
    put: func(key: string, value: list<u8>) -> result<list<u8>, string>;
    exists: func(key: string) -> result<bool, string>;
}

interface id-verifier {
    /// Verifies an initial identity inception event.
    verify-inception: func(component: string, incepiton: list<u8>) -> result<list<u8>, string>;
    /// Verifies an identity update event against the existing identity state.
    verify-event: func(component: string, state: list<u8>, event: list<u8>) -> result<list<u8>, string>;
}

interface id-command {
    publish: func(topic: string, payload: list<u8>) -> result<_, string>;
    request: func(peer: string, payload: list<u8>) -> result<_, string>;
    response: func(payload: list<u8>) -> result<_, string>;
}

world idp2p-p2p {
    import id-verifier;
    import id-store;
    import id-command;
    export handle: func(msg: list<u8>) -> result<_, string>;
}