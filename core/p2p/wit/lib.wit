package idp2p:wasmlib;

world idp2p-wasmlib {
    import host: interface {
        get: func(key: string) -> result<list<u8>, string>;
        call: func(envelope: list<u8>, state: option<list<u8>>) -> result<list<u8>, string>;
    }
    export handle: func(envelope: list<u8>, state: option<list<u8>>) -> result<list<u8>, string>;
}


/*
   {
     "id": "bacdlfdlf",
     "inception": {
        "id": "bacdlfdlf",
        "payload": "bayyydyydyydydy",
        "signatures": [""],
        "proofs": [""]
     },
     events: [
     {
        "id": "bacdlfdlf",
        "payload": "bayyydyydyydydy",
        "signatures": [""],
        "proofs": [""]
     }
     ]
   }

   verify inception: 

   - get protocol, major, minor and find the component id
   - call(envelope, {id, signatures, proofs}.to_bytes())

   verify event:

   - get protocol, major, minor and find the component id
   - get state from store
   - call(envelope, {id, signatures, proofs, state}.to_bytes())

   handle(envelope, data) {
      envelope = envelope.deserialize();
      match envelope.method {
         proof => {
            {payload} = data;
            proof = envelope.body.deserialize();
            verify(payload, proof)
         }
         inception => {
            {id, signatures, proofs} = data.deserialize();
            verify_signatures(payload, proof)
            verify_proofs(payload, proof)
         }
         event => {
            {id, signatures, proofs} = data.deserialize();
            verify_signatures(payload, proof)
            verify_proofs(payload, proof)
         }
      }
   }
*/