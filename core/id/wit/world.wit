package idp2p:id;

world idp2p-id {
    type cid = list<u8>;

    variant id-inception-error {
        invalid-id,
        invalid-payload, 
        payload-and-id-not-match(string),
        total-next-signers-not-match(u16),  // total signers
        invalid-next-signer-codec(cid),   // the signer
        other(string),
    }

    variant id-event-error {
        invalid-id,
        invalid-payload, 
        payload-and-id-not-match(string),
        lack-of-min-signers(u16),    // min signers
        signer-and-id-not-match(cid),
        previous-not-match(cid),
        signature(cid),
        invalid-next-signer-codec(cid),   // the signer
        other(string),
    }

    variant id-multisig {
        one-of-one,
        one-of-two,
        two-of-tree,
        three-of-five,
    }

    record id-config {
        multisig: id-multisig,
        recovery-duration: u32
    }

    record persisted-id-proof {
        id: cid,
        pk: list<u8>,
        sig: list<u8>,
    }

    record persisted-id-inception {
        id: cid,
        payload: list<u8>,
    }

    record persisted-id-event {
        id: cid,
        payload: list<u8>,
        proofs: list<persisted-id-proof>,
    }

    record id-view {
        // Identifier 
        id: cid,
        // Multi signature method   
        config: id-config,
        // State of the identity
        state: cid,
        // Last event id
        event-id: cid,
        // Last event time
        event-timestamp: string,
        // CID codec should be 0x72(libp2p-key) or 0xed 
        mediators: list<cid>,
        // CID codec should be 0xed 
        next-signers: list<cid>,  
        // All signers
        all-signers: list<cid>,
        // All signers
        all-states: list<cid>,
    }

    /*variant id-mediator-action {
        add(cid),
        remove(cid),
    }

    record create-id-input {
        config: id-config,
        next-signers: list<cid>,
        mediators: list<cid>,
    }

    record mutate-id-input {
        previous: cid,
        next-signers: list<cid>,
        state: option<cid>,
        mediators: list<id-mediator-action>,
    }

    record recover-id-input {
        previous: cid,
        next-signers: list<id-public-key>,
        config: option<id-config>
    }*/

    export verify-inception: func(incepiton: persisted-id-inception) -> result<id-view, id-inception-error>;

    export verify-event: func(view: id-view, event: persisted-id-event) -> result<id-view, id-event-error>;
}